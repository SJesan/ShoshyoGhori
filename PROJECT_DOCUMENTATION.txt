# শস্যঘড়ি (ShoshyoGhori) - Agricultural Management System
## Complete Project Documentation

================================================================================
PROJECT OVERVIEW
================================================================================

**Project Name:** শস্যঘড়ি (ShoshyoGhori) - Agricultural Management System
**Version:** 1.0.0
**Technology Stack:** React + Vite + Tailwind CSS + Supabase
**Language:** Bengali (Primary), English (Code)
**Target Audience:** Bangladeshi Farmers and Agricultural Enthusiasts

================================================================================
PROJECT DESCRIPTION
================================================================================

শস্যঘড়ি is a comprehensive agricultural management web application designed specifically for Bangladeshi farmers. The application provides weather forecasting, crop management, agricultural guidance, and farming tips to help farmers make informed decisions about their crops and farming practices.

================================================================================
TECHNICAL ARCHITECTURE
================================================================================

## Frontend Framework
- **React 19.1.1** - Modern React with hooks and functional components
- **Vite 7.1.6** - Fast build tool and development server
- **React Router 7.9.1** - Client-side routing
- **Tailwind CSS 4.0** - Utility-first CSS framework

## Backend & Database
- **Supabase** - Backend-as-a-Service for authentication and database
- **PostgreSQL** - Database (managed by Supabase)

## External APIs
- **IP-API.com** - Geolocation services for user location detection
- **Open-Meteo API** - Weather forecasting and meteorological data
- **Unsplash API** - High-quality agricultural images

## Development Tools
- **ESLint** - Code linting and quality assurance
- **Vite** - Build tool and development server
- **Node.js** - JavaScript runtime environment

================================================================================
PROJECT STRUCTURE
================================================================================

```
shoshyoGhori v1/
├── public/
│   └── vite.svg
├── src/
│   ├── assets/
│   │   ├── LoginBG.jpeg
│   │   └── react.svg
│   ├── components/
│   │   ├── App.jsx                 # Main routing configuration
│   │   ├── Login.jsx              # User authentication
│   │   ├── Nav.jsx                # Navigation component
│   │   ├── UserDashboard.jsx     # User profile and weather
│   │   ├── MainPage1.jsx          # Main dashboard
│   │   ├── CropPlanting.jsx       # Crop planting guidance
│   │   ├── DiseasePrevention.jsx # Disease prevention tips
│   │   ├── PestControl.jsx       # Pest control methods
│   │   ├── FertilizerIrrigation.jsx # Fertilizer and irrigation
│   │   ├── NotFound.jsx           # 404 error page
│   │   ├── supabaseClient.js     # Supabase configuration
│   │   ├── user.jsx              # User management utilities
│   │   └── weather.jsx           # Weather component (legacy)
│   ├── main.jsx                   # Application entry point
│   └── App.jsx                    # Main application component
├── index.html                     # HTML template
├── package.json                   # Dependencies and scripts
├── vite.config.js                # Vite configuration
├── eslint.config.js              # ESLint configuration
└── README.md                     # Project readme
```

================================================================================
COMPONENT DOCUMENTATION
================================================================================

## 1. App.jsx - Main Application Router
**Purpose:** Central routing configuration for the entire application
**Key Features:**
- Protected route implementation
- Route definitions for all pages
- Authentication guard using localStorage

**Routes:**
- `/` - Login page
- `/dashboard` - User dashboard
- `/mainpage` - Main agricultural dashboard
- `/crop-planting` - Crop planting guidance
- `/disease-prevention` - Disease prevention tips
- `/pest-control` - Pest control methods
- `/fertilizer-irrigation` - Fertilizer and irrigation guidance
- `/*` - 404 Not Found page

## 2. Login.jsx - Authentication System
**Purpose:** User authentication and registration
**Key Features:**
- User registration with validation
- Login functionality
- Form validation (password length, phone number)
- Modern glass morphism design
- Responsive design

**Form Fields:**
- Name (for registration)
- Phone number (11 digits minimum)
- Password (6 characters minimum)
- Confirm password (for registration)

**Validation Rules:**
- All fields required
- Password minimum 6 characters
- Phone number minimum 11 digits
- Password confirmation must match

## 3. Nav.jsx - Navigation Component
**Purpose:** Application navigation bar
**Key Features:**
- Brand logo with icon
- Navigation links
- Logout functionality
- Responsive design
- Hover effects and transitions

**Navigation Items:**
- মূলপাতা (Main Page)
- ড্যাশবোর্ড (Dashboard)
- লগআউট (Logout)

## 4. UserDashboard.jsx - User Profile & Weather
**Purpose:** User profile display and weather forecasting
**Key Features:**
- User profile information display
- Geolocation detection
- Weather forecasting
- Location-based weather data
- Responsive card layout

**Data Sources:**
- User data from Supabase
- Location data from IP-API.com
- Weather data from Open-Meteo API

## 5. MainPage1.jsx - Main Agricultural Dashboard
**Purpose:** Central dashboard for agricultural information
**Key Features:**
- Weather display with 4-day forecast
- Seasonal crop recommendations
- Temperature-based crop suggestions
- Crop progress tracking
- Educational content sections
- Interactive topic cards

**Sections:**
- Weather Information
- Suitable Crops by Temperature
- Seasonal Crop Selection
- Crop Progress Tracking
- Agricultural Tips
- Disease Prevention Tips
- Soil Health Information

## 6. Content Components (CropPlanting, DiseasePrevention, PestControl, FertilizerIrrigation)
**Purpose:** Detailed agricultural guidance and information
**Key Features:**
- 10 content items per component
- Detailed information with images
- Modal popup for detailed content
- Interactive content browsing
- Educational agricultural content

**Content Structure:**
- Title
- Preview text
- Detailed content
- High-quality images
- 5 detailed points per item

## 7. NotFound.jsx - 404 Error Page
**Purpose:** Handle invalid routes
**Key Features:**
- User-friendly error message
- Navigation back to home
- Modern design
- Responsive layout

================================================================================
DATA SOURCES & APIs
================================================================================

## 1. Supabase Database
**Purpose:** User authentication and data storage
**Tables:**
- `Users` - User account information
  - id (Primary Key)
  - Name (User's full name)
  - Phone (Phone number)
  - Password (Hashed password)

**Authentication:**
- User registration
- User login
- Session management
- Data persistence

## 2. IP-API.com
**Purpose:** Geolocation services
**Endpoint:** `http://ip-api.com/json/`
**Data Retrieved:**
- City name
- Country name
- Latitude/Longitude
- Timezone
- IP address

**Usage:** Automatic location detection for weather services

## 3. Open-Meteo API
**Purpose:** Weather forecasting
**Endpoint:** `https://api.open-meteo.com/v1/forecast`
**Parameters:**
- latitude (from IP-API)
- longitude (from IP-API)
- daily parameters (temperature, weather code, etc.)
- timezone (from IP-API)

**Data Retrieved:**
- Daily temperature (max/min)
- Weather conditions
- Weather codes
- 4-day forecast

## 4. Unsplash API
**Purpose:** High-quality agricultural images
**Usage:** Background images and content illustrations
**Image Categories:**
- Agricultural landscapes
- Crop fields
- Farming equipment
- Weather conditions
- Agricultural activities

================================================================================
FEATURES & FUNCTIONALITY
================================================================================

## 1. User Authentication
- **Registration:** New user account creation
- **Login:** Existing user authentication
- **Session Management:** Persistent login sessions
- **Logout:** Secure session termination

## 2. Weather Services
- **Location Detection:** Automatic geolocation
- **Weather Forecasting:** 4-day weather forecast
- **Temperature Display:** Current and forecasted temperatures
- **Weather Icons:** Visual weather representation
- **Location-based Data:** Weather specific to user location

## 3. Agricultural Guidance
- **Crop Planting:** 10 detailed planting guidelines
- **Disease Prevention:** 10 disease prevention methods
- **Pest Control:** 10 pest control techniques
- **Fertilizer & Irrigation:** 10 fertilizer and irrigation tips

## 4. Crop Management
- **Crop Selection:** Temperature-based crop recommendations
- **Seasonal Crops:** Season-appropriate crop suggestions
- **Progress Tracking:** User's crop progress monitoring
- **Crop Information:** Detailed crop information and images

## 5. Educational Content
- **Farming Tips:** Static agricultural advice
- **Disease Prevention:** Health tips for crops
- **Soil Health:** Soil management information
- **Best Practices:** Agricultural best practices

## 6. User Interface
- **Responsive Design:** Mobile and desktop compatibility
- **Modern UI:** Glass morphism and gradient designs
- **Bengali Language:** Full Bengali language support
- **Interactive Elements:** Hover effects and animations
- **Accessibility:** Keyboard navigation and screen reader support

================================================================================
TECHNICAL REQUIREMENTS
================================================================================

## Development Environment
- **Node.js:** Version 16.0 or higher
- **npm:** Version 7.0 or higher
- **Modern Browser:** Chrome, Firefox, Safari, Edge

## Environment Variables
**Required for Supabase integration:**
```
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

## Build Requirements
- **Vite:** For development and building
- **Tailwind CSS:** For styling
- **React:** For component development
- **ESLint:** For code quality

================================================================================
INSTALLATION & SETUP
================================================================================

## 1. Clone Repository
```bash
git clone [repository-url]
cd shoshyoGhori
```

## 2. Install Dependencies
```bash
npm install
```

## 3. Environment Setup
Create `.env` file in root directory:
```
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_key
```

## 4. Development Server
```bash
npm run dev
```

## 5. Production Build
```bash
npm run build
```

## 6. Preview Production Build
```bash
npm run preview
```

================================================================================
DEPLOYMENT CONSIDERATIONS
================================================================================

## 1. Supabase Setup
- Create Supabase project
- Set up database tables
- Configure authentication
- Set up environment variables

## 2. Database Schema
```sql
CREATE TABLE Users (
  id SERIAL PRIMARY KEY,
  Name VARCHAR(255) NOT NULL,
  Phone VARCHAR(20) UNIQUE NOT NULL,
  Password VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);
```

## 3. API Keys
- **Supabase:** Database and authentication
- **IP-API:** Geolocation services (free tier available)
- **Open-Meteo:** Weather data (free tier available)
- **Unsplash:** Image services (free tier available)

## 4. Hosting Platforms
- **Vercel:** Recommended for React applications
- **Netlify:** Alternative hosting platform
- **GitHub Pages:** Free hosting option
- **Firebase Hosting:** Google's hosting platform

================================================================================
SECURITY CONSIDERATIONS
================================================================================

## 1. Authentication
- **Password Storage:** Passwords stored in Supabase (hashed)
- **Session Management:** localStorage for session persistence
- **Route Protection:** Protected routes for authenticated users

## 2. Data Privacy
- **User Data:** Stored securely in Supabase
- **Location Data:** Used only for weather services
- **API Calls:** Secure HTTPS connections

## 3. Input Validation
- **Form Validation:** Client-side validation
- **Phone Numbers:** 11-digit validation
- **Passwords:** Minimum 6 characters

================================================================================
PERFORMANCE OPTIMIZATION
================================================================================

## 1. Code Splitting
- **Route-based splitting:** Each page loads independently
- **Component lazy loading:** On-demand component loading

## 2. Image Optimization
- **Unsplash API:** Optimized image delivery
- **Responsive images:** Different sizes for different devices
- **Lazy loading:** Images load when needed

## 3. API Optimization
- **Caching:** Weather data caching
- **Error handling:** Graceful API failure handling
- **Loading states:** User feedback during API calls

================================================================================
FUTURE ENHANCEMENTS
================================================================================

## 1. Additional Features
- **Crop Calendar:** Planting and harvesting schedules
- **Market Prices:** Real-time crop prices
- **Expert Consultation:** Connect with agricultural experts
- **Community Forum:** Farmer community features

## 2. Technical Improvements
- **PWA Support:** Progressive Web App features
- **Offline Support:** Offline functionality
- **Push Notifications:** Weather and crop alerts
- **Multi-language:** Support for multiple languages

## 3. Data Analytics
- **User Analytics:** Usage tracking and insights
- **Crop Analytics:** Success rate tracking
- **Weather Analytics:** Historical weather data
- **Performance Metrics:** Application performance monitoring

================================================================================
TROUBLESHOOTING
================================================================================

## Common Issues

### 1. Supabase Connection Issues
- **Check environment variables**
- **Verify Supabase project settings**
- **Check network connectivity**

### 2. Weather API Issues
- **Check API key validity**
- **Verify location permissions**
- **Check network connectivity**

### 3. Build Issues
- **Clear node_modules and reinstall**
- **Check Node.js version**
- **Verify all dependencies**

### 4. Styling Issues
- **Check Tailwind CSS configuration**
- **Verify CDN link in index.html**
- **Clear browser cache**

================================================================================
CONTRIBUTING GUIDELINES
================================================================================

## 1. Code Standards
- **ESLint:** Follow linting rules
- **Component Structure:** Use functional components
- **Styling:** Use Tailwind CSS classes
- **Comments:** Add comments for complex logic

## 2. Git Workflow
- **Feature branches:** Create branches for new features
- **Commit messages:** Clear and descriptive commits
- **Pull requests:** Review before merging

## 3. Testing
- **Manual testing:** Test all functionality
- **Cross-browser testing:** Test in multiple browsers
- **Responsive testing:** Test on different screen sizes

================================================================================
SUPPORT & CONTACT
================================================================================

## Technical Support
- **Documentation:** Refer to this documentation
- **Code Comments:** Check inline code comments
- **Community:** GitHub issues and discussions

## Development Team
- **Frontend:** React and Tailwind CSS
- **Backend:** Supabase integration
- **Design:** Modern UI/UX design
- **Content:** Agricultural expertise

================================================================================
LICENSE & COPYRIGHT
================================================================================

**Project:** শস্যঘড়ি (ShoshyoGhori)
**Version:** 1.0.0
**License:** [Specify license]
**Copyright:** [Year] [Organization/Developer]

================================================================================
CHANGELOG
================================================================================

## Version 1.0.0 (Current)
- Initial release
- User authentication system
- Weather forecasting
- Agricultural guidance content
- Crop management features
- Modern responsive design
- Bengali language support

================================================================================
END OF DOCUMENTATION
================================================================================

This documentation provides a comprehensive overview of the শস্যঘড়ি (ShoshyoGhori) agricultural management system. For technical support or questions, please refer to the troubleshooting section or contact the development team.

Last Updated: [Current Date]
Documentation Version: 1.0.0
